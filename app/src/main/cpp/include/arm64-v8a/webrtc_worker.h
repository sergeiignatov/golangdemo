/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package webrtc_worker */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdlib.h>

typedef enum WebRtcCodecTypeElem {
    WEBRTC_CODEC_TYPE_END = 0,
    WEBRTC_CODEC_TYPE_AUDIO = 1,
    WEBRTC_CODEC_TYPE_VIDEO = 2
} WebRtcCodecType;


struct WebRtcCodecParams {
	WebRtcCodecType codecType;
	char* mimeType;
	unsigned int clockRate;
	unsigned short int channels;
	char* formatParams;
};

struct WebRtcAudioItem {
char *data;
int data_len;
int dts;
double duration;
};

struct WebRtcVideoItem {
char *data;
int data_len;
double pts;
double dts;
double duration;
};

struct WebRtcCodecCapability {
	char* mimeType;
	int clockRate;
	short int channels;
	char* fmtLine;
};

struct WebRtcStatsInfo {
	unsigned long long audio_bytes_sent;
	unsigned int audio_sent_total;
	unsigned int audio_lost_total;
	float audio_lost_frac;
	unsigned long long video_bytes_sent;
	unsigned int video_sent_total;
	unsigned int video_lost_total;
	float video_lost_frac;
};

typedef void (*connection_state_cb)(int, void*);

extern void bridge_connection_state_cb(int state, void* context, connection_state_cb cb);

typedef void (*webrtc_log_cb)(char*);

extern void bridge_webrtc_logger(char* msg, webrtc_log_cb cb);


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void WebRtcSetLogger(webrtc_log_cb cb);
extern int WebRtcCreateClient(struct WebRtcCodecParams* codecs);
extern char* WebRtcCreateOffer(int clientId);
extern void WebRtcSetConnectionStateCallback(int clientId, connection_state_cb handler, void* context);
extern char* WebRtcSetRemoteDescription(int clientId, char* sdpStr);
extern struct WebRtcCodecCapability* WebRtcGetCodecCapability(int clientId, enum WebRtcCodecTypeElem codecType);
extern char* WebRtcSendAudio(int clientId, struct WebRtcAudioItem* item);
extern char* WebRtcSendVideo(int clientId, struct WebRtcVideoItem* item);
extern int WebRtcWantKeyframe(int clientId);
extern int WebRtcGetSenderStats(int clientId, struct WebRtcStatsInfo* stats);
extern void WebRtcClose(int clientId);
extern char* SayHello();

#ifdef __cplusplus
}
#endif
